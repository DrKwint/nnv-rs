# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc c7f7df569e0d1522c1eb2683147033c87fb4d6c5e93b8fee62116932712f1ed1 # shrinks to dnn = DNN { graph: Graph { representation_ops:  	(RepresentationId { representation_node_id: 3, operation_step: None }, 2) 	(RepresentationId { representation_node_id: 5, operation_step: None }, 4) 	(RepresentationId { representation_node_id: 2, operation_step: None }, 1) 	(RepresentationId { representation_node_id: 6, operation_step: None }, 5) 	(RepresentationId { representation_node_id: 4, operation_step: None }, 3) 	(RepresentationId { representation_node_id: 7, operation_step: None }, 6) 	(RepresentationId { representation_node_id: 1, operation_step: None }, 0) 	(RepresentationId { representation_node_id: 8, operation_step: None }, 7) operation_nodes:  	OperationNode { operation: Dense { aff: Affine { basis: [[0.0, -3.177770139767362]], shape=[1, 2], strides=[2, 1], layout=CFcf (0xf), const ndim=2, shift: [-7.239380869171068], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 } }, inputs: [RepresentationId { representation_node_id: 0, operation_step: None }], outputs: [RepresentationId { representation_node_id: 1, operation_step: None }] } 	OperationNode { operation: ReLU { ndims: 1 }, inputs: [RepresentationId { representation_node_id: 1, operation_step: None }], outputs: [RepresentationId { representation_node_id: 2, operation_step: None }] } 	OperationNode { operation: Dense { aff: Affine { basis: [[-5.437538499125751]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 } }, inputs: [RepresentationId { representation_node_id: 2, operation_step: None }], outputs: [RepresentationId { representation_node_id: 3, operation_step: None }] } 	OperationNode { operation: ReLU { ndims: 1 }, inputs: [RepresentationId { representation_node_id: 3, operation_step: None }], outputs: [RepresentationId { representation_node_id: 4, operation_step: None }] } 	OperationNode { operation: Dense { aff: Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 } }, inputs: [RepresentationId { representation_node_id: 4, operation_step: None }], outputs: [RepresentationId { representation_node_id: 5, operation_step: None }] } 	OperationNode { operation: ReLU { ndims: 1 }, inputs: [RepresentationId { representation_node_id: 5, operation_step: None }], outputs: [RepresentationId { representation_node_id: 6, operation_step: None }] } 	OperationNode { operation: Dense { aff: Affine { basis: [[0.0],  [0.0]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0, 0.0], shape=[2], strides=[1], layout=CFcf (0xf), const ndim=1 } }, inputs: [RepresentationId { representation_node_id: 6, operation_step: None }], outputs: [RepresentationId { representation_node_id: 7, operation_step: None }] } 	OperationNode { operation: ReLU { ndims: 2 }, inputs: [RepresentationId { representation_node_id: 7, operation_step: None }], outputs: [RepresentationId { representation_node_id: 8, operation_step: None }] } }, input_representation_ids: [RepresentationId { representation_node_id: 0, operation_step: None }], output_representation_ids: [RepresentationId { representation_node_id: 8, operation_step: None }] }, star_aff = Affine { basis: [[0.0, 0.0],  [0.0, 7.728660055600486]], shape=[2, 2], strides=[2, 1], layout=Cc (0x5), const ndim=2, shift: [0.0, 0.0], shape=[2], strides=[1], layout=CFcf (0xf), const ndim=1 }, input_bounds = Bounds { data: [[0.0, -4.511395869392518],  [0.0, -4.460672376779127]], shape=[2, 2], strides=[2, 1], layout=Cc (0x5), const ndim=2 }, local_output_bounds = Bounds { data: [[0.0, -9.978098971089576],  [0.0, 0.0]], shape=[2, 2], strides=[2, 1], layout=Cc (0x5), const ndim=2 }
