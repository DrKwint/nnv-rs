# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc fa11f082a8eb40828cfa7e9d1079bbb0ea146dff73367cc88ec7ea29905a32f0 # shrinks to mut asterism = Asterism { arena: [StarNode { star: Star { representation: Affine { basis: [[1.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }, constraints: None }, dnn_index: DNNIndex { layer: None, remaining_steps: None }, star_cdf: None, cdf_delta: 0.0, axis_aligned_input_bounds: None, output_bounds: None, gaussian_distribution: None }], node_type: [None], parents: [None], feasible: [None], loc: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1, scale: [[1e-5]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, safe_value: 1.0, input_bounds_opt: Some(Bounds { data: [[-3.5000000000000004e-5],  [3.5000000000000004e-5]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2 }), dnn: DNN { layers: [Dense(Affine { basis: [[-0.19680200889543897]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [7.204450735937861], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, max_accept_reject_iters: 4, num_cdf_samples: 100, stability_eps: 1e-10 }
cc a8a3341c7d3e1be83078ea7879fcfc023dcf0d802a340bd3add87cff40553170 # shrinks to mut asterism = Asterism { arena: [StarNode { star: Star { representation: Affine { basis: [[1.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }, constraints: None }, dnn_index: DNNIndex { layer: None, remaining_steps: None }, star_cdf: None, cdf_delta: 0.0, axis_aligned_input_bounds: None, output_bounds: None, gaussian_distribution: None }], node_type: [None], parents: [None], feasible: [None], loc: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1, scale: [[1e-5]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, safe_value: 1.0, input_bounds_opt: Some(Bounds { data: [[-3.5000000000000004e-5],  [3.5000000000000004e-5]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2 }), dnn: DNN { layers: [Dense(Affine { basis: [[-7.656864864179713]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, max_accept_reject_iters: 4, num_cdf_samples: 100, stability_eps: 1e-10 }
cc 5c93c2f94c8c89c3f3b21b041733209bb447f3df6b5079dd4ed8bef1872b5617 # shrinks to mut asterism = Asterism { arena: [StarNode { star: Star { representation: Affine { basis: [[1.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }, constraints: None }, dnn_index: DNNIndex { layer: None, remaining_steps: None }, star_cdf: None, cdf_delta: 0.0, axis_aligned_input_bounds: None, output_bounds: None, gaussian_distribution: None }], node_type: [None], parents: [None], feasible: [None], loc: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1, scale: [[1e-5]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, safe_value: 1.0, input_bounds_opt: Some(Bounds { data: [[-3.5000000000000004e-5],  [3.5000000000000004e-5]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2 }), dnn: DNN { layers: [Dense(Affine { basis: [[3.7182008670629685]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, max_accept_reject_iters: 4, num_cdf_samples: 100, stability_eps: 1e-10 }
cc caa1de09aed5f4efe0541aaa703a210442ec485f70da341be9492a17af97bd7a # shrinks to mut asterism = Asterism { arena: [StarNode { star: Star { representation: Affine { basis: [[1.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }, constraints: None }, dnn_index: DNNIndex { layer: None, remaining_steps: None }, star_cdf: None, cdf_delta: 0.0, axis_aligned_input_bounds: None, output_bounds: None, gaussian_distribution: None }], node_type: [None], parents: [None], feasible: [None], loc: [4.740086325897813], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1, scale: [[1e-5]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, safe_value: 1.0, input_bounds_opt: Some(Bounds { data: [[4.740051325897814],  [4.740121325897813]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2 }), dnn: DNN { layers: [Dense(Affine { basis: [[7.128613550826547]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, max_accept_reject_iters: 4, num_cdf_samples: 100, stability_eps: 1e-10 }
cc 6a8eb4df23cc41cb1411e923e47b3681899b9d3061d92d09b02975202a69fc02 # shrinks to mut asterism = Asterism { arena: [StarNode { star: Star { representation: Affine { basis: [[1.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }, constraints: None }, dnn_index: DNNIndex { layer: None, remaining_steps: None }, star_cdf: None, cdf_delta: 0.0, axis_aligned_input_bounds: None, output_bounds: None, gaussian_distribution: None }], node_type: [None], parents: [None], feasible: [None], loc: [-5.890499138936058], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1, scale: [[1e-5]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, safe_value: 1.0, input_bounds_opt: Some(Bounds { data: [[-5.890534138936058],  [-5.890464138936059]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2 }), dnn: DNN { layers: [Dense(Affine { basis: [[-7.3244047729470285]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, max_accept_reject_iters: 4, num_cdf_samples: 100, stability_eps: 1e-10 }
cc 6236cf74291af6a1fb02efd817e503b771b3adb5f01d37da1a9949ecc07befae # shrinks to mut asterism = Asterism { arena: [StarNode { star: Star { representation: Affine { basis: [[1.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }, constraints: None }, dnn_index: DNNIndex { layer: None, remaining_steps: None }, star_cdf: None, cdf_delta: 0.0, axis_aligned_input_bounds: None, output_bounds: None, gaussian_distribution: None }], node_type: [None], parents: [None], feasible: [None], loc: [-1.0421707442074002], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1, scale: [[1e-5]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, safe_value: 1.0, input_bounds_opt: Some(Bounds { data: [[-1.0422057442074002],  [-1.0421357442074002]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2 }), dnn: DNN { layers: [Dense(Affine { basis: [[-1.577725895550639]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [-3.423801788298544], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [4.651296077864329], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, max_accept_reject_iters: 4, num_cdf_samples: 100, stability_eps: 1e-10 }
