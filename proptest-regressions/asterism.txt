# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc a57f7cc8b39c7139ed3a04a651f5f71fc5cc02067c5db09ca73a2a4c88782101 # shrinks to mut constellation = Constellation { arena: [StarNode { star: Star { representation: Affine { basis: [[1.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }, constraints: Some(Polytope { halfspaces: Inequality { coeffs: [[-1.0],  [1.0]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, rhs: [0.000035000000000000004, 0.000035000000000000004], shape=[2], strides=[1], layout=CFcf (0xf), const ndim=1 } }) }, dnn_index: DNNIndex { layer: None, remaining_steps: None }, star_cdf: None, local_bounds: None, output_bounds: None, is_feasible: true }], node_type: [None], loc: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1, scale: [[0.00001]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, dnn: DNN { layers: [Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [6.68285539508399], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, input_bounds: Some(Bounds { data: [[-0.000035000000000000004],  [0.000035000000000000004]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2 }) }
cc 03687c204d6365135d43f4bacea9645234148840402b83cdcc630fb973ef1773 # shrinks to mut constellation = Constellation { arena: [StarNode { star: Star { representation: Affine { basis: [[1.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }, constraints: Some(Polytope { halfspaces: Inequality { coeffs: [[-1.0],  [1.0]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, rhs: [0.000035000000000000004, 0.000035000000000000004], shape=[2], strides=[1], layout=CFcf (0xf), const ndim=1 } }) }, dnn_index: DNNIndex { layer: None, remaining_steps: None }, star_cdf: None, local_bounds: None, output_bounds: None, is_feasible: true }], node_type: [None], loc: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1, scale: [[0.00001]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, dnn: DNN { layers: [Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [2.475810502259268], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, input_bounds: Some(Bounds { data: [[-0.000035000000000000004],  [0.000035000000000000004]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2 }) }
