# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 8533443d339b8469164f04b03c699fec5ee2b97edbf885680217ec3d3d27ce30 # shrinks to dnn = DNN { layers: [Dense(Affine { basis: [[0.0, 0.0, 0.0, -0.0]], shape=[1, 4], strides=[4, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, input_bounds = Bounds { data: [[0.0, 0.0, 0.0, 0.0],  [0.0, 0.0, 0.0, 0.0]], shape=[2, 4], strides=[4, 1], layout=Cc (0x5), const ndim=2 }
cc ab8a78c45b535486fc4e2b6524352da987cb9d09b1efd22b006a2e59797c037e # shrinks to dnn = DNN { layers: [Dense(Affine { basis: [[0.00000000000000000000000000000000000000000000000000000000000000000000000010988314902863442, 57744222349471936000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005290204878717204, 10661003275632896000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0]], shape=[1, 4], strides=[4, 1], layout=CFcf (0xf), const ndim=2, shift: [48853186906014240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[15695202275020153000000000000000000000000000000000.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [94072189427520670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, input_bounds = Bounds { data: [[110965158624368350000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0, 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023512558535174423, 0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003442383709695862, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045444324172948826],  [29074994665575040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0, 0.00000000000000000000000000000000000000000000000000000000000000000000000000002028039614995127, 202816630227827000000000000000000000000000000000000000000000.0, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005190741492170788]], shape=[2, 4], strides=[4, 1], layout=Cc (0x5), const ndim=2 }
cc 3bde939656785d51c90bcb48b950877516b1b854dfe38cfd16bb9129b605c6f1 # shrinks to dnn = DNN { layers: [Dense(Affine { basis: [[-3.61850601852876, 9.910230138475946]], shape=[1, 2], strides=[2, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[8.391049217922308]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1)] }, input_bounds = Bounds { data: [[-6.612886847167929, 0.0],  [4.301598361664709, 3.2934076271147372]], shape=[2, 2], strides=[2, 1], layout=Cc (0x5), const ndim=2 }
cc cab8b582cd248df4ef68e833d250cae603d14ce4a8ac6d6e4ce6a499d96849fd # shrinks to dnn = DNN { layers: [Dense(Affine { basis: [[0.0, 0.0, 0.0]], shape=[1, 3], strides=[3, 1], layout=CFcf (0xf), const ndim=2, shift: [7.850116429876685], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[9.490434433832146],  [0.0]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0, 0.0], shape=[2], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(2)] }, input_bounds = Bounds { data: [[0.0, 0.0, 0.0],  [0.0, 0.0, 0.0]], shape=[2, 3], strides=[3, 1], layout=Cc (0x5), const ndim=2 }
cc 2806d6f71c4361f3898bb5c3464d4ae3db8d3eb5fa120285797694bce886718e # shrinks to dnn = DNN { layers: [Dense(Affine { basis: [[-8.294978719547164, 6.354437512696531, 8.686046096063535]], shape=[1, 3], strides=[3, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0],  [-4.390275110906798]], shape=[2, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0, 3.4491453192575996], shape=[2], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(2)] }, input_bounds = Bounds { data: [[0.6292664102086754, 0.0, -1.0879770233966735],  [6.850817125805552, 5.084226365451784, 1.0342462647644535]], shape=[2, 3], strides=[3, 1], layout=Cc (0x5), const ndim=2 }
cc 476c6cacc3b0f3d69fcb0dd3b4f879a1d8994dd5d9ef3c36c42ee24c66935db8 # shrinks to dnn = DNN { layers: [Dense(Affine { basis: [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], shape=[1, 8], strides=[8, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0]], shape=[1, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0], shape=[1], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(1), Dense(Affine { basis: [[0.0],  [0.0],  [0.0],  [0.0]], shape=[4, 1], strides=[1, 1], layout=CFcf (0xf), const ndim=2, shift: [0.0, 0.0, 0.0, -7.420033267733661], shape=[4], strides=[1], layout=CFcf (0xf), const ndim=1 }), ReLU(4)] }, input_bounds = Bounds { data: [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], shape=[2, 8], strides=[8, 1], layout=Cc (0x5), const ndim=2 }
